 def generate_output_files(self):
        # 读取第一个表和在库表的数据
        if self.zaiku_file_path is None:
            self.zaiku_file_path = r"\\LS410D8E6\tool\bazhuayu\在庫.csv"
        if self.output_folder is None:
            self.output_folder = r"D:"
        if self.Qoo10data_file is None:
            # self.select_file_dialog()
            print(f'打开选择Qoo10文件 ={self.Qoo10data_file}')
            if self.Qoo10data_file == '':
                return
            # Qdata = pd.read_csv(self.Qoo10data_file, encoding='shift-jis')
        Qdata = pd.read_csv(self.Qoo10data_file, encoding='ANSI')
        zaiku_data = pd.read_csv(self.zaiku_file_path, encoding='ANSI')

        Qdata['JANコード'] = Qdata['JANコード'].astype(str)
        zaiku_data['商品ID'] = zaiku_data['商品ID'].astype(str).str.strip()

        # 将日期数据转换为 datetime 格式
        Qdata['入金日'] = pd.to_datetime(Qdata['入金日'])
        # 根据入金日期升序对Qoo10data表进行排序
        Qdata.sort_values(by='入金日', ascending=True, inplace=True)

        # 初始化可出库表和出库UP表
        available_for_shipping = pd.DataFrame(columns=Qdata.columns)
        in_stock_UP = pd.DataFrame(
            columns=['品番', '注文番号', '発送予定日', '商品名', '数量', '決済サイト', '購入者決済金額', '供給原価の合計',
                     '販売者商品コード', 'JANコード'])

        # 获取今日日期
        now = datetime.datetime.now()
        # 将当前日期时间格式化为指定的格式（年月日时分）
        now_date = now.strftime('%Y%m%d%H%M')

        # 初始化字典
        dizhi_dict = {}
        zhuwenbanhao_dict = {}

        # 对于第一个表中的每个订单
        for index, row in Qdata.iterrows():
            # 在在库表中查找匹配的商品
            matching_items = zaiku_data[(zaiku_data['商品ID'] == row['JANコード']) & (zaiku_data['在庫数'] > 0)]

            # 获取地址和注文番号
            address = row['住所']
            order_number = row['注文番号']

            # 更新dizhi_dict和zhuwenbanhao_dict,无论是否有数据都向地址添加注文番号
            if address not in dizhi_dict:
                dizhi_dict[address] = [order_number]
            else:
                dizhi_dict[address].append(order_number)

            # 如果有库存，处理该订单
            if not matching_items.empty:

                if order_number not in zhuwenbanhao_dict:
                    # 创建出库UP表的条目
                    in_stock_up_item = {
                        '品番': zaiku_data.loc[matching_items.index[0], '品番'],
                        '注文番号': row['注文番号'],
                        '発送予定日': now_date,
                        '商品名': row['商品名'],
                        '数量': row['数量'],
                        '決済サイト': row['決済サイト'],
                        '購入者決済金額': row['購入者決済金額'],
                        '供給原価の合計': row['供給原価の合計'],
                        '販売者商品コード': row['販売者商品コード'],
                        'JANコード': row['JANコード']
                    }
                    zhuwenbanhao_dict[order_number] = [[row], [in_stock_up_item]]

                # 减少库存数量
                zaiku_data.loc[matching_items.index[0], '在庫数'] -= 1

        # 遍历dizhi_dict
        for address, order_numbers in dizhi_dict.items():
            # 检查对应地址的订单是否都有对应的在库商品
            all_orders_have_stock = True
            for order_number in order_numbers:
                if order_number not in zhuwenbanhao_dict:
                    all_orders_have_stock = False
                    break

            # 如果都有对应的在库商品，则将内容写入可出货表和出库UP表中
            if all_orders_have_stock:
                for order_number in order_numbers:
                    # 写入可出货表
                    available_for_shipping = available_for_shipping.append(zhuwenbanhao_dict[order_number][0],
                                                                           ignore_index=True)

                    # 写入出库UP表
                    for item in zhuwenbanhao_dict[order_number][1]:
                        in_stock_UP = in_stock_UP.append(item, ignore_index=True)
        # 保存可出库表和在库UP表
        available_for_shipping.to_csv(f"{self.output_folder}\\可出库{now_date}.csv", index=False, encoding='shift-jis')
        in_stock_UP.to_csv(f"{self.output_folder}\\出庫UP{now_date}.csv", index=False, encoding='ANSI')

        # 生成邮局上传文件
        # 过滤出配送会社为"ゆうパケット"的行
        yuupacket_data = available_for_shipping[available_for_shipping["配送会社"] == "ゆうパケット"]

        # 定义新表的标题行
        new_columns = ["お届け先郵便番号", "お届け先氏名", "お届け先敬称", "お届け先住所1行目", "お届け先住所2行目",
                       "お届け先住所3行目",
                       "お届け先住所4行目", "内容品"]
        new_data = pd.DataFrame(columns=new_columns)

        # 商品名关键字映射字典
        keyword_mapping = {
            "Switch": "ゲームソフト",
            "PS4": "ゲームソフト",
            "任天堂": "ゲームソフト",
            "ゲーム": "ゲームソフト",
            "Office": "PCソフト",
            "SSD": "PCパーツ(バッテリーなし)",
            "HHD": "PCパーツ(バッテリーなし)",
            "NVMe": "PCパーツ(バッテリーなし)",
            "SATA": "PCパーツ(バッテリーなし)",
            "M.2": "PCパーツ(バッテリーなし)",
            "メモリ": "PCパーツ(バッテリーなし)",
            "Keyboard": "キーボード",
            "Trackpad": "マウス"
        }

        # 遍历原始数据逐行生成新表
        for index, row in yuupacket_data.iterrows():
            # 在这里根据表1的标题行逐行处理原始数据，并生成新表的一行数据
            new_row = [
                row["郵便番号"][1:],  # お届け先郵便番号，去掉最前面的'
                row["受取人名"],  # お届け先氏名
                "様",  # お届け先敬称
                row["住所"][:20],  # お届け先住所1行目，最多20个字符
                row["住所"][20:40],  # お届け先住所2行目，最多20个字符
                row["住所"][40:60],  # お届け先住所3行目，最多20个字符
                row["受取人携帯電話番号"] if pd.notnull(row["受取人携帯電話番号"]) else row["受取人電話番号"],
                # お届け先住所4行目，如果受取人携帯電話番号为空则添入受取人電話番号
                row["商品名"]  # 数量
            ]
            # 根据关键字映射字典查找内容品
            for keyword, content in keyword_mapping.items():
                if keyword in row["商品名"]:
                    new_row[-1] = content
                    break
            new_data = new_data.append(pd.Series(new_row, index=new_data.columns), ignore_index=True)
        # 保存新表
        new_data.to_csv(f"{self.output_folder}\\ゆうパケット{now_date}.csv", index=False, encoding='ANSI')
        return f"{self.output_folder}\\出庫UP{now_date}.csv"
