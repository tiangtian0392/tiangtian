# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Qoo10search.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import re
import requests,time
from bs4 import BeautifulSoup
from PyQt5 import QtCore, QtGui, QtWidgets
import sys,os,json
from PyQt5.QtWidgets import *
from PyQt5 import QtWidgets

class Ui_Form(object):

    data = []
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(373, 469)
        self.gridLayout = QtWidgets.QGridLayout(Form)
        self.gridLayout.setObjectName("gridLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.lineEdit = QtWidgets.QLineEdit(Form)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.comboBox = QtWidgets.QComboBox(Form)
        self.comboBox.setMinimumSize(QtCore.QSize(100, 0))
        self.comboBox.setObjectName("comboBox")
        self.horizontalLayout.addWidget(self.comboBox)
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.gridLayout.addLayout(self.horizontalLayout, 0, 0, 1, 1)
        self.tableWidget = QtWidgets.QTableWidget(Form)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(6)
        self.tableWidget.setRowCount(0)

        #设置列宽
        column_width_list = [55,55,40,80,30,30]
        for i ,item in enumerate(column_width_list):
            self.tableWidget.setColumnWidth(i, item)

        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)
        self.gridLayout.addWidget(self.tableWidget, 1, 0, 1, 1)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        #添加列表项
        # 项目列表
        items = ["价格低到高", "评论多到少", "排名顺序"]

        # 使用循环添加项目到comboBox
        for item in items:
            self.comboBox.addItem(item)

        self.pushButton.clicked.connect(self.BT_start)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.pushButton.setText(_translate("Form", "查找"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Form", "现售价"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Form", "原价"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Form", "运费"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("Form", "商家"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("Form", "店级"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("Form", "好评"))

    def BT_start(self,str_txt=None,sortType= None):
        comboBox_dict = {"价格低到高":"SELL_PRICE_ASC","评论多到少":"MOST_REVIEWED","排名顺序":"SORT_RANK_POINT"}

        # 清空表格
        self.tableWidget.clearContents()
        self.tableWidget.setRowCount(0)
        print('点击开始', str_txt)
        if str_txt is False:
            str_txt = self.lineEdit.text()
            print(str_txt)
            if str_txt == '':
                return
        if sortType ==None:
            sortType = 'SELL_PRICE_ASC'
        print('点击开始',str_txt)

        html = self.get_Qoo10_data(str_txt,sortType)
        self.work_Qoo10(html)
        print(self.data)


        # 逐行添加数据
        for row, rowData in enumerate(self.data):
            # 插入新行
            self.tableWidget.insertRow(row)
            # 添加每个单元格的数据
            for col, item in enumerate(rowData):
                # 创建QTableWidgetItem对象并设置文本

                if '円' in item:
                    item = item.replace('円','')
                tableItem = QTableWidgetItem(item)
                # 设置对应单元格

                # 如果是最后一列（title列），则设置提示内容
                if col == len(rowData) - 1:
                    continue
                self.tableWidget.setItem(row, col, tableItem)

                # 设置对应单元格的提示内容为该行的标题
                tableItem.setToolTip(self.data[row][-1])

    #在窗口程序的类中，添加一个公共函数search_with_params，用于接收搜索参数并执行搜索操作
    def search_with_params(self, keyword, sort_type):
        # 设置搜索参数

        # 调用点击查找按钮的函数
        self.BT_start(str_txt=None,sortType= sort_type,)
    def get_Qoo10_data(self,str_text, sortType='SELL_PRICE_ASC'):
        # import requests, re
        url = f'https://www.qoo10.jp/s/?keyword_hist={str_text}&sortType={sortType}'
        hd = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.51 Safari/537.36",
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
            "Accept-Language": "ja,zh-CN;q=0.9,zh;q=0.8",

        }
        htmlcode = requests.get(url, headers=hd)
        code = htmlcode.apparent_encoding
        # print('code=', code)
        htmlcode.encoding = code
        htmlcode = htmlcode.text

        # print(f'Qoo10价格={htmlcode}')

        return htmlcode

    def work_Qoo10(self,htmlcode):
        #定义表格数据
        self.data = []

        # 使用 BeautifulSoup 解析 HTML 代码
        soup = BeautifulSoup(htmlcode, 'html.parser')

        # 找到所有的 <tr> 标签
        trs = soup.find_all('tr')

        # 遍历每个 <tr> 标签，提取所需数据
        print(f'共有商家{len(trs) - 1}个')
        for tr in trs:
            # print(tr)
            # 获取该行的 id 属性值
            tr_id = tr.get('id')

            if tr_id == None:
                continue

            print('------------------------')
            # 提取 goodscode
            goodscode = tr.get('goodscode')

            # 提取商家名
            merchant_name = tr.find('a', class_='lnk_sh').get('title')

            # 提取 td_prc 值
            td_prc = tr.find('td', class_='td_prc').find('strong').text

            # 提取 dc_prc 值
            try:
                dc_prc = tr.find('span', class_='dc_prc').find('del').text
            except:
                dc_prc = ''

            # 使用正则表达式提取 style="width: 93%" 的值
            try:
                style_value = tr.find('div', class_='review_rating_star')['style']
                pingjia = re.search(r'width:\s*([\d.]+)%', style_value).group(1)
            except:
                pingjia = ''

            shipping_text = tr.find('div', class_='ship').get_text(strip=True)

            # 提取运费信息
            if '無料' in shipping_text:  # 如果包含 "無料"，表示免费运费
                shipping_cost = '無料'
            else:  # 否则提取运费金额
                shipping_cost = shipping_text.replace('Shipping rate:', '').strip()

            # 提取商家评级
            try:
                grade_title = tr.find('span', class_='grd_pw')['title']
                grade_title = '优秀'
            except:
                try:
                    grade_title = tr.find('span', class_='grd_gd')['title']
                    grade_title = '良好'
                except:
                    grade_title = tr.find('span', class_='grd_gn')['title']
                    grade_title = '普通'

            #提取标题
            goodstitle = tr.find('img','').get('alt', '')

            self.data.append([td_prc,dc_prc,shipping_cost,merchant_name,grade_title,pingjia,goodstitle])
            print("Goodscode:", goodscode)
            print("店名:", merchant_name)
            print("现销价:", td_prc)
            print("原价:", dc_prc)
            print("好评率:", pingjia)
            print('运费：', shipping_cost)
            print("商家等级标题:", grade_title)
            print('商品标题',goodstitle)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    Form = QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
