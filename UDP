import socket
import threading
import tkinter as tk
import pyqrcode


class UDPReceiver:
    def __init__(self, local_ip="127.0.0.1", port=9959):

        self.local_ip = socket.gethostbyname(socket.gethostname())
        # print(self.local_ip)

        self.port = port
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind((self.local_ip, self.port))
        self.is_running = False

        self.root = tk.Tk()
        self.root.title("UDP Receiver")
        self.root.geometry("300x230")

        # 显示本机IP和监视的端口的二维码
        url = self.local_ip + ":" + str(self.port)
        qr = pyqrcode.create(url)
        qr_img = qr.xbm(scale=5)
        qr_bmp = tk.BitmapImage(data=qr_img)
        self.qr_label = tk.Label(self.root, image=qr_bmp, width=130, height=130)
        self.qr_label.pack(side=tk.TOP, padx=1, pady=1)

        self.qr_text_label = tk.Label(self.root, text=url)
        self.qr_text_label.pack(side=tk.TOP, padx=1, pady=1)

        self.text_label = tk.Label(self.root, text="接收到的消息将会显示在这里")
        self.text_label.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

        # 创建运行和停止按钮
        self.start_button = tk.Button(self.root, text="开始运行", command=self.start_listening, state=tk.NORMAL)
        self.start_button.pack(side=tk.LEFT, padx=5, pady=5)

        self.stop_button = tk.Button(self.root, text="停止运行", command=self.stop_listening, state=tk.DISABLED)
        self.stop_button.pack(side=tk.LEFT, padx=5, pady=5)

        # 运行窗口
        self.root.mainloop()

    def start_listening(self):
        self.is_running = True
        self.start_button.config(state=tk.DISABLED)
        self.stop_button.config(state=tk.NORMAL)

        # 启动一个线程来监听UDP消息
        thread = threading.Thread(target=self.receive)
        thread.start()

    def stop_listening(self):
        self.is_running = False
        self.start_button.config(state=tk.NORMAL)
        self.stop_button.config(state=tk.DISABLED)

    def receive(self):
        while self.is_running:
            data, addr = self.socket.recvfrom(1024)
            message = data.decode("utf-8")

            # 更新文本标签内容
            self.text_label.config(text=message)

            # 模拟键盘输出
            self.root.event_generate("<Key>", keycode=ord(message), keysym=message)

    def generate_qr_code(self):
        pass


if __name__ == '__main__':
    receiver = UDPReceiver()
